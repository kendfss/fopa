package main

import (
	"os"
	"text/template"

	"github.com/kendfss/but"
	"github.com/kendfss/fopa/internal"
)

func main() {
	f := but.Mustv(os.Create("parsed.go"))
	but.Must(template.Must(template.New("").Parse(templateString)).Execute(f, struct {
		Rules    []internal.Rule
		Chars    []string
		Pattern  string
		Specials map[string]struct{}
	}{
		Rules:    internal.GetForbiddenRules(),
		Chars:    internal.GetForbiddenChars(),
		Pattern:  pattern(),
		Specials: specials,
	}))
}

const templateString = `// generated by go generate
// do not modify by hand

package internal

const Pattern = {{ printf "%q" .Pattern }}

var Specials = map[string]struct{}{
{{- range $key, $val := .Specials }}
	{{ printf "%q" $key }}: {},
{{- end }}
}

var ForbiddenRules = []Rule{
{{- range .Rules }}
	{Symb: {{ printf "%q" .Symb }}, Desc: {{ printf "%q" .Desc }}},
{{- end }}
}

var ForbiddenChars = []string{
{{- range .Chars }}
	{{ printf "%q" . }},
{{- end }}
}
`

const specialString = "{[(\\.+*|?:^$)]}" // characters with special meanings in regex

var specials = map[string]struct{}{}

func init() {
	for _, char := range specialString {
		specials[string(char)] = struct{}{}
	}
}

func pattern() string {
	out := ""
	forbidden := internal.GetForbiddenChars()
	for i, e := range forbidden {
		if _, special := specials[e]; special {
			out += "\\"
		}
		out += e
		if i < len(forbidden)-1 {
			out += "|"
		}
	}
	return out
}
